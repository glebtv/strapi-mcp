{
  "url": "https://docs.strapi.io/cms/features/users-permissions",
  "markdown": "# Users & Permissions | Strapi 5 Documentation\nThe Users & Permissions feature allows the management of the end-users of a Strapi project. It provides a full authentication process based on JSON Web Tokens (JWT) to protect your API, and an access-control list (ACL) strategy that enables you to manage permissions between groups of users.\nFree feature\nCRUD permissions in Roles > Plugins - Users & Permissions\nAvailable by default\nAvailable in both Development & Production environment\n## Admin panel configuration[​](#admin-panel-configuration \"Direct link to Admin panel configuration\")\nThe Users & Permissions feature is configured from both the admin panel settings, and via the code base.\n### Roles[​](#roles \"Direct link to Roles\")\nThe Users & Permissions feature allows to create and manage roles for end users, to configure what they can have access to.\n#### Creating a new role[​](#creating-a-new-role \"Direct link to Creating a new role\")\n**Path:** _Users & Permissions plugin > Roles_\nOn the top right side of the _Roles_ interface, an **Add new role** button is displayed. It allows to create a new role for end users of your Strapi application.\nClick on the **Add new role** button to be redirected to the roles edition interface, where you will be able to name your new role and define its details and permissions (see [Editing a role](#editing-a-role)).\n![End-users roles interface](https://docs.strapi.io/img/assets/users-permissions/end-user_roles.png)![End-users roles interface](https://docs.strapi.io/img/assets/users-permissions/end-user_roles_DARK.png)\nNote\nThe end-user role attributed by default to all new end users can be defined in the _Advanced settings_ sub-section of _Users & Permissions plugin_ (see [Advanced settings](#advanced-settings)).\n#### Editing a role[​](#editing-a-role \"Direct link to Editing a role\")\n**Path:** _Users & Permissions plugin > Roles_\nThe _Roles_ interface displays all created roles for the end users of your Strapi application.\nBy default, 2 end-user roles are defined for any Strapi application:\n-   Authenticated: for end users to access content only if they are logged in to a front-end application.\n-   Public: for end users to access content without being logged in to a front-end application.\nMore roles can however be created (see [Creating a new role](#creating-a-new-role)), and all can be edited through the role edition interface.\n1.  Click on the edit button of the role to edit — except if you directly landed on the role edition interface from creating a new role.\n2.  Fill in the _Role details_, following the instructions from the table below:\n| Role details | Instructions |\n| --- | --- |\n| Name | Write the new name of the role in the textbox. |\n| Description | Write the description of the role in the textbox. It should help administrators understand what the role gives access to. |\n3.  Configure the end-user role's _Permissions_ by:\n    1.  Clicking on the name of the permission category to configure (e.g. Application, Content-Manager, Email etc.).\n    2.  Ticking the boxes of the actions and permissions to grant for the role.\n4.  Click on the **Save** button.\nTip\nWhen ticking an action or permission box, related bound routes of the API are displayed in the right side of the interface.\n![Configuring a role for end users](https://docs.strapi.io/img/assets/users-permissions/end-user_roles-config.png)![Configuring a role for end users](https://docs.strapi.io/img/assets/users-permissions/end-user_roles-config_DARK.png)\n#### Deleting a role[​](#deleting-a-role \"Direct link to Deleting a role\")\n**Path:** _Users & Permissions plugin > Roles_\nAlthough the 2 default end-user roles cannot be deleted, the other ones can, as long as no end user still has this role attributed to their account.\n1.  Click on the delete button on the right side of the role's record.\n2.  In the deletion window, click on the **Confirm** button to confirm the deletion.\n### Providers[​](#providers \"Direct link to Providers\")\n**Path:** _Users & Permissions plugin > Providers_\nThe Users & Permissions feature allows enabling and configuring providers, for end users to login via a third-party provider to access the content of a front-end application through the Strapi application API.\nBy default, a list of providers is available including one, \"Email\", enabled by default for all Strapi applications with Users & Permissions enabled.\n1.  Click on the edit button of the provider to enable and configure.\n2.  In the provider edition window, click on the **TRUE** button of the _Enable_ option.\n3.  Fill in the provider's configurations. Each provider has its own specific set of configurations (see [Users & Permissions providers documentation](https://docs.strapi.io/cms/configurations/users-and-permissions-providers#setting-up-the-provider---examples)).\n4.  Click on the **Save** button.\n![Providers interface](https://docs.strapi.io/img/assets/settings/up_providers.png)![Providers interface](https://docs.strapi.io/img/assets/settings/up_providers_DARK.png)\nOther providers that are not proposed by default by Strapi can be added manually through the code of your Strapi application. Click on any of the following cards to get additional information on configuring or creating third-party providers:\n### Email templates[​](#email-templates \"Direct link to Email templates\")\n**Path:** _Users & Permissions plugin > Email templates_\nThe Users & Permissions feature uses 2 email templates, \"Email address confirmation\" and \"Reset password\", that are sent to end users:\n-   if their account must be confirmed to be activated,\n-   if they need to reset the password of their Strapi account.\nBoth email templates can be modified.\n1.  Click on the edit button of the email template to configure and edit.\n2.  Configure the email template:\n    | Setting name | Instructions |\n    | --- | --- |\n    | Shipper name | Indicate the name of the shipper of the email. |\n    | Shipper email | Indicate the email address of the shipper of the email. |\n    | Response email | (optional) Indicate the email address to which responses emails from the end users will be sent. |\n    | Subject | Write the subject of the email. Variables can be used (see [templating emails](#templating-emails)). |\n3.  Edit the content of the email in the \"Message\" textbox. Email templates content is in HTML and uses variables (see [templating emails](#templating-emails)).\n4.  Click on the **Finish** button.\n![Email templates interface](https://docs.strapi.io/img/assets/settings/up_email-templates.png)![Email templates interface](https://docs.strapi.io/img/assets/settings/up_email-templates_DARK.png)\n### Advanced Settings[​](#advanced-settings \"Direct link to Advanced Settings\")\n**Path:** _Users & Permissions plugin > Advanced settings_\nAll settings related to the Users & Permissions feature are managed from the _Advanced Settings_ interface, including the choice of a default role for end users, the enablement of sign-ups and email confirmation, as well as the choice of landing page for resetting a password.\n1.  Configure the settings of your choice, following the instructions below:\n    | Setting name | Instructions |\n    | --- | --- |\n    | Default role for authenticated users | Click the drop-down list to choose the default role for new end users. |\n    | One account per email address | Click on the **TRUE** button to limit to 1 the number of end-user accounts with the same email address.\n    Click on **FALSE** to disable this limitation and allow several end-user accounts to be associated with the same email address (e.g. `kai.doe@strapi.io` can be used when logging in via several different providers). |\n    | Enable sign-ups | Click on the **TRUE** button to enable end-user sign-ups.\n    Click on **FALSE** to prevent end-user registration to your front-end application(s). |\n    | Reset password page | Indicate the URL of the reset password page for your front-end application(s). |\n    | Enable email confirmation | Click on the **TRUE** button to enable end-user account confirmation by sending them a confirmation email.\n    Click on **FALSE** to disable account confirmation. |\n    | Redirection url | Indicate the URL of the page where end users should be redirected after confirming their Strapi account. |\n2.  Click the **Save** button.\n![Advanced settings interface](https://docs.strapi.io/img/assets/settings/up_settings.png)![Advanced settings interface](https://docs.strapi.io/img/assets/settings/up_settings_DARK.png)\n## Code-based configuration[​](#code-based-configuration \"Direct link to Code-based configuration\")\nWhile most of the Users & Permissions settings are handled via the admin panel, some more specific settings can be fine-tuned by configuring and customizing your Strapi project's code.\n### JWT configuration[​](#jwt-configuration \"Direct link to JWT configuration\")\nYou can configure the JWT generation by using the [plugins configuration file](https://docs.strapi.io/cms/configurations/plugins).\nStrapi uses [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) to generate the JWT.\nAvailable options:\n-   `jwtSecret`: random string used to create new JWTs, typically set using the `JWT_SECRET` [environment variable](https://docs.strapi.io/cms/configurations/environment#strapi).\n-   `jwt.expiresIn`: expressed in seconds or a string describing a time span.\n    Eg: 60, \"45m\", \"10h\", \"2 days\", \"7d\", \"2y\". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (minutes, hours, days, years, etc), otherwise milliseconds unit is used by default (\"120\" is equal to \"120ms\").\n-   JavaScript\n-   TypeScript\n/config/plugins.js\n```\nmodule.exports = ({ env }) => ({  // ...  'users-permissions': {    config: {      jwt: {        expiresIn: '7d',      },    },  },  // ...});\n```\nWarning\nSetting JWT expiry for more than 30 days is not recommended due to security concerns.\n### Registration configuration[​](#registration-configuration \"Direct link to Registration configuration\")\nIf you have added any additional fields in your User **model** that need to be accepted on registration, you need to added them to the list of allowed fields in the `config.register` object of [the `/config/plugins` file](https://docs.strapi.io/cms/configurations/plugins), otherwise they will not be accepted.\nThe following example shows how to ensure a field called \"nickname\" is accepted by the API on user registration:\n-   JavaScript\n-   TypeScript\n/config/plugins.js\n```\nmodule.exports = ({ env }) => ({  // ...  \"users-permissions\": {    config: {      register: {        allowedFields: [\"nickname\"],      },    },  },  // ...});\n```\n### Templating emails[​](#templating-emails \"Direct link to Templating emails\")\nBy default this plugin comes with two templates: reset password and email address confirmation. The templates use [Lodash's \\`template()\\` method](https://lodash.com/docs/4.17.15#template) to populate the variables.\nYou can update these templates under **Plugins** > **Roles & Permissions** > **Email Templates** tab in the admin panel (see [configuring email templates](#email-templates)).\nThe following variables can be used:\n-   Reset password\n-   Email address confirmation\n-   `USER` (object)\n    -   `username`\n    -   `email`\n-   `TOKEN` corresponds to the token generated to be able to reset the password.\n-   `URL` is the link where the user will be redirected after clicking on it in the email.\n-   `SERVER_URL` is the absolute server url (configured in server configuration).\n### Security configuration[​](#security-configuration \"Direct link to Security configuration\")\nJWTs can be verified and trusted because the information is digitally signed. To sign a token a _secret_ is required. By default Strapi generates and stores it in `/extensions/users-permissions/config/jwt.js`.\nThis is useful during development but for security reasons it is recommended to set a custom token via an environment variable `JWT_SECRET` when deploying to production.\nBy default you can set a `JWT_SECRET` environment variable and it will be used as secret. If you want to use another variable you can update the configuration file.\n-   JavaScript\n-   TypeScript\n/extensions/users-permissions/config/jwt.js\n```\nmodule.exports = {  jwtSecret: process.env.SOME_ENV_VAR,};\n```\n#### Creating a custom callback validator[​](#creating-a-custom-password-validation \"Direct link to Creating a custom callback validator\")\nBy default, Strapi SSO only redirects to the redirect URL that is exactly equal to the url in the configuration:\n![Users & Permissions configuration](https://docs.strapi.io/img/assets/users-permissions/sso-config-custom-validator.png)![Users & Permissions configuration](https://docs.strapi.io/img/assets/users-permissions/sso-config-custom-validator_DARK.png)\nIf you need to configure a custom handler to accept other URLs, you can create a callback `validate` function in your plugins.js for the `users-permissions` plugin.\n/config/plugins.js|ts\n```\n  // ... other plugins configuration ...  // Users & Permissions configuration  'users-permissions': {    enabled: true,    config: {      callback: {        validate: (cbUrl, options) => {          // cbUrl is where Strapi is being asked to redirect the auth info          // that was received from the provider to          // in this case, we will only validate that the           // if using a base url, you should always include the trailing slash          // although in real-world usage you should also include the full paths          if (cbUrl.startsWith('https://myproxy.mysite.com/') ||               cbUrl.startsWith('https://mysite.com/')) {            return;          }          // Note that you MUST throw an error to fail validation          // return values are not checked          throw new Error('Invalid callback url');        },      },    },  },\n```\n## Usage[​](#usage \"Direct link to Usage\")\nThe Users & Permissions feature can be used both via the admin panel, to create new end-user accounts, and via the APIs.\n### Admin panel usage[​](#admin-panel-usage \"Direct link to Admin panel usage\")\n**Path to use the feature:** Content Manager\nWith the Users & Permissions feature, the end users and their account information are managed as a content-type. When Users & Permissions is installed on a Strapi application, 3 collection types are automatically created, including \"User\" which is the only one available directly in the Content Manager.\n![Managing end users via the Content Manager](https://docs.strapi.io/img/assets/users-permissions/end-user_content-manager.png)![Managing end users via the Content Manager](https://docs.strapi.io/img/assets/users-permissions/end-user_content-manager_DARK.png)\nRegistering new end users in a front-end application with the Users & Permissions plugin consists in adding a new entry to the User collection type.\n1.  Go to the User collection type in the Content Manager.\n2.  Click on the **Create new entry** button in the top right corner.\n3.  Fill in the default fields of the entry. Additional fields added specifically for your Strapi application by your administrators may be displayed as well.\n    | Field | Instructions |\n    | --- | --- |\n    | Username | Write the username of the end user. |\n    | Email | Write the complete email address of the end user in the textbox. |\n    | Password | (optional) Write a new password in the textbox. You can click on the icon for the password to be shown. |\n    | Confirmed | (optional) Click **ON** for the end-user account to be confirmed. |\n    | Blocked | (optional) Click **ON** to block the account of the end user, to prevent them to access content. |\n    | Role | (optional) Indicate the role that should be granted to the new end user. If this field is not filled in, the end user will be attributed the role set as default (see \"Default role\" option in [advanced settings](#advanced-settings)). |\n4.  Click on the **Save** button.\nNote\nIf end users can register themselves on your front-end application (see \"Enable signups\" option in [advanced settings](#advanced-settings)), a new entry will automatically be created and the fields of that entry will be filled up with the information indicated by the end user. All fields can however be edited by an administrator of the Strapi application.\n### API usage[​](#api-usage \"Direct link to API usage\")\nEach time an API request is sent the server checks if an `Authorization` header is present and verifies if the user making the request has access to the resource.\nNote\nWhen you create a user without a role, or if you use the `/api/auth/local/register` route, the `authenticated` role is given to the user.\n#### Identifier[​](#identifier \"Direct link to Identifier\")\nThe `identifier` param can be an email or username, as in the following examples:\n-   Axios\n-   Postman\n```\nimport axios from 'axios';// Request API.axios  .post('http://localhost:1337/api/auth/local', {    identifier: 'user@strapi.io',    password: 'strapiPassword',  })  .then(response => {    // Handle success.    console.log('Well done!');    console.log('User profile', response.data.user);    console.log('User token', response.data.jwt);  })  .catch(error => {    // Handle error.    console.log('An error occurred:', error.response);  });\n```\n#### Token usage[​](#token-usage \"Direct link to Token usage\")\nThe `jwt` may then be used for making permission-restricted API requests. To make an API request as a user place the JWT into an `Authorization` header of the `GET` request.\nAny request without a token will assume the `public` role permissions by default. Modify the permissions of each user's role in the admin dashboard.\nAuthentication failures return a `401 (unauthorized)` error.\nThe `token` variable is the `data.jwt` received when logging in or registering.\n```\nimport axios from 'axios';const token = 'YOUR_TOKEN_HERE';// Request API.axios  .get('http://localhost:1337/posts', {    headers: {      Authorization: `Bearer ${token}`,    },  })  .then(response => {    // Handle success.    console.log('Data: ', response.data);  })  .catch(error => {    // Handle error.    console.log('An error occurred:', error.response);  });\n```\n#### User registration[​](#user-registration \"Direct link to User registration\")\nCreating a new user in the database with a default role as 'registered' can be done like in the following example:\n```\nimport axios from 'axios';// Request API.// Add your own code here to customize or restrict how the public can register new users.axios  .post('http://localhost:1337/api/auth/local/register', {    username: 'Strapi user',    email: 'user@strapi.io',    password: 'strapiPassword',  })  .then(response => {    // Handle success.    console.log('Well done!');    console.log('User profile', response.data.user);    console.log('User token', response.data.jwt);  })  .catch(error => {    // Handle error.    console.log('An error occurred:', error.response);  });\n```\n#### User object in Strapi context[​](#user-object-in-strapi-context \"Direct link to User object in Strapi context\")\nThe `user` object is available to successfully authenticated requests.\nThe authenticated `user` object is a property of `ctx.state`.\n```\ncreate: async ctx => {  const { id } = ctx.state.user;  const depositObj = {    ...ctx.request.body,    depositor: id,  };  const data = await strapi.services.deposit.add(depositObj);  // Send 201 `created`  ctx.created(data);};\n```",
  "timestamp": 1753486856443,
  "title": "Users & Permissions | Strapi 5 Documentation"
}