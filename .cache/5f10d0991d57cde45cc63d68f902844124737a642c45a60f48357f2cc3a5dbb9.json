{
  "url": "https://docs.strapi.io/dev-docs/api/rest/filters-locale-publication",
  "markdown": "# Filters | Strapi 5 Documentation\n[Skip to main content](#__docusaurus_skipToContent_fallback)\nüßëüèΩ‚Äçüî¨ We're testing new AI and search tools on [docs-next.strapi.io](https://docs-next.strapi.io)! Feel free to have a look and [share your feedback](https://forms.gle/ei7p4koru8RaUCDB6)\n[\n![Strapi Documentation Logo](https://docs.strapi.io/img/logo-v5.png)![Strapi Documentation Logo](https://docs.strapi.io/img/logo-v5-dark.png)\n](https://docs.strapi.io/)[CMS](https://docs.strapi.io/cms/intro) [Cloud](https://docs.strapi.io/cloud/intro)\n[GitHub](https://github.com/strapi/documentation)\nSearch\nSearchAsk AI\n-   Getting Started\n    -   [Quick Start Guide](https://docs.strapi.io/cms/quick-start)\n    -   [Project structure](https://docs.strapi.io/cms/project-structure)\n    -   [Installation](https://docs.strapi.io/cms/installation)\n    -   [Admin panel](https://docs.strapi.io/cms/features/admin-panel)\n    -   [Content Manager](https://docs.strapi.io/cms/features/content-manager)\n    -   [Content Type Builder](https://docs.strapi.io/cms/features/content-type-builder)\n    -   [Deployment](https://docs.strapi.io/cms/deployment)\n-   Features\n    -   [API Tokens](https://docs.strapi.io/cms/features/api-tokens)\n    -   [Audit Logs](https://docs.strapi.io/cms/features/audit-logs)\n    -   [Content History](https://docs.strapi.io/cms/features/content-history)\n    -   [Custom Fields](https://docs.strapi.io/cms/features/custom-fields)\n    -   [Data Management](https://docs.strapi.io/cms/features/data-management)\n    -   [Draft & Publish](https://docs.strapi.io/cms/features/draft-and-publish)\n    -   [Email](https://docs.strapi.io/cms/features/email)\n    -   [Internationalization (i18n)](https://docs.strapi.io/cms/features/internationalization)\n    -   [Media Library](https://docs.strapi.io/cms/features/media-library)\n    -   [Preview](https://docs.strapi.io/cms/features/preview)\n    -   [Role-Based Access Control (RBAC)](https://docs.strapi.io/cms/features/rbac)\n    -   [Releases](https://docs.strapi.io/cms/features/releases)\n    -   [Review Workflows](https://docs.strapi.io/cms/features/review-workflows)\n    -   [Single Sign-On (SSO)](https://docs.strapi.io/cms/features/sso)\n    -   [Users & Permissions](https://docs.strapi.io/cms/features/users-permissions)\n    -   [Strapi plugins](https://docs.strapi.io/cms/plugins/documentation)\n-   [APIs](https://docs.strapi.io/cms/api/content-api)\n    -   [APIs Introduction](https://docs.strapi.io/cms/api/content-api)\n    -   [Document concept](https://docs.strapi.io/cms/api/document)\n    -   [REST API](https://docs.strapi.io/cms/api/rest)\n        -   [Endpoints](https://docs.strapi.io/cms/api/rest)\n        -   [Parameters](https://docs.strapi.io/cms/api/rest/parameters)\n        -   [Filters](https://docs.strapi.io/cms/api/rest/filters)\n        -   [Locale](https://docs.strapi.io/cms/api/rest/locale)\n        -   [Status](https://docs.strapi.io/cms/api/rest/status)\n        -   [Populate & Select](https://docs.strapi.io/cms/api/rest/populate-select)\n        -   [Relations](https://docs.strapi.io/cms/api/rest/relations)\n        -   [Sort & Pagination](https://docs.strapi.io/cms/api/rest/sort-pagination)\n        -   [Upload files](https://docs.strapi.io/cms/api/rest/upload)\n        -   [Interactive Query Builder](https://docs.strapi.io/cms/api/rest/interactive-query-builder)\n        -   [Guides](https://docs.strapi.io/cms/api/rest/guides/intro)\n    -   [Strapi Client](https://docs.strapi.io/cms/api/client)\n    -   [GraphQL API](https://docs.strapi.io/cms/api/graphql)\n    -   [Document Service API](https://docs.strapi.io/cms/api/document-service)\n-   Configurations\n    -   [Introduction](https://docs.strapi.io/cms/configurations)\n    -   [Admin panel\n        We simplified the admin panel configuration section to make it easier to navigate and find what you need.\n        The new structure groups configurations by their purpose, making it more intuitive to locate specific settings.\n        _Notes:_\n        -   Lifecycle functions documentation has been moved to the Development section.\n        -   Email and Upload Providers documentation have been included in the corresponding Features pages.\n        ](https://docs.strapi.io/cms/configurations/admin-panel)\n-   [API calls](https://docs.strapi.io/cms/configurations/api)\n-   [CRON jobs](https://docs.strapi.io/cms/configurations/cron)\n-   [Database\n    This section now regroups all the database-related configurations and guides, including migrations and transactions.\n    ](https://docs.strapi.io/cms/configurations/database)\n-   [Environment variables](https://docs.strapi.io/cms/configurations/environment)\n-   [Features](https://docs.strapi.io/cms/configurations/features)\n-   [Middlewares](https://docs.strapi.io/cms/configurations/middlewares)\n-   [Plugins](https://docs.strapi.io/cms/configurations/plugins)\n-   [Server](https://docs.strapi.io/cms/configurations/server)\n-   Development\n    -   [Introduction](https://docs.strapi.io/cms/customization)\n    -   [Lifecycle functions](https://docs.strapi.io/cms/configurations/functions)\n    -   [Backend customization](https://docs.strapi.io/cms/backend-customization)\n    -   [Admin panel customization\n        This section has been reorganized, see details below.\n        ](https://docs.strapi.io/cms/admin-panel-customization)\n    -   [Homepage customization](https://docs.strapi.io/cms/admin-panel-customization/homepage)\n    -   [Error handling](https://docs.strapi.io/cms/error-handling)\n    -   [Templates](https://docs.strapi.io/cms/templates)\n    -   [Testing](https://docs.strapi.io/cms/testing)\n-   TypeScript\n    -   This section is new\n        We grouped all the TypeScript-related content into a new section, including configurations, development tips, and guides.\n    -   [Introduction](https://docs.strapi.io/cms/typescript)\n    -   [Configuration](https://docs.strapi.io/cms/configurations/typescript)\n    -   [Development](https://docs.strapi.io/cms/typescript/development)\n    -   [Guides](https://docs.strapi.io/cms/typescript/guides)\n-   Command Line Interface\n    -   [Strapi CLI](https://docs.strapi.io/cms/cli)\n-   Plugins\n    -   [Marketplace](https://docs.strapi.io/cms/plugins/installing-plugins-via-marketplace)\n    -   [Plugins development](https://docs.strapi.io/cms/plugins-development/developing-plugins)\n-   Upgrades\n    -   [Upgrade tool reference](https://docs.strapi.io/cms/upgrade-tool)\n    -   [v4 ‚Üí v5](https://docs.strapi.io/cms/migration/v4-to-v5/introduction-and-faq)\n-   [](https://docs.strapi.io/)\n-   [APIs](https://docs.strapi.io/cms/api/content-api)\n-   REST API\n-   Filters\nOn this page\n# REST API: Filters\nThe [REST API](https://docs.strapi.io/cms/api/rest) offers the ability to filter results found with its [\"Get entries\"](https://docs.strapi.io/cms/api/rest#get-all) method.\nUsing optional Strapi features can provide some more filters:\n-   If the [Internationalization (i18n) plugin](https://docs.strapi.io/cms/features/internationalization) is enabled on a content-type, it's possible to filter by locale.\n-   If the [Draft & Publish](https://docs.strapi.io/cms/features/draft-and-publish) is enabled, it's possible to filter based on a `published` (default) or `draft` status.\nTip\nStrapi takes advantage of the ability of [the \\`qs\\` library](https://github.com/ljharb/qs) to parse nested objects to create more complex queries.\nUse `qs` directly to generate complex queries instead of creating them manually. Examples in this documentation showcase how you can use `qs`.\nYou can also use the [interactive query builder](https://docs.strapi.io/cms/api/rest/interactive-query-builder) if you prefer playing with our online tool instead of generating queries with `qs` on your machine.\nQueries can accept a `filters` parameter with the following syntax:\n`GET /api/:pluralApiId?filters[field][operator]=value`\nThe following operators are available:\n| Operator | Description |\n| --- | --- |\n| `$eq` | Equal |\n| `$eqi` | Equal (case-insensitive) |\n| `$ne` | Not equal |\n| `$nei` | Not equal (case-insensitive) |\n| `$lt` | Less than |\n| `$lte` | Less than or equal to |\n| `$gt` | Greater than |\n| `$gte` | Greater than or equal to |\n| `$in` | Included in an array |\n| `$notIn` | Not included in an array |\n| `$contains` | Contains |\n| `$notContains` | Does not contain |\n| `$containsi` | Contains (case-insensitive) |\n| `$notContainsi` | Does not contain (case-insensitive) |\n| `$null` | Is null |\n| `$notNull` | Is not null |\n| `$between` | Is between |\n| `$startsWith` | Starts with |\n| `$startsWithi` | Starts with (case-insensitive) |\n| `$endsWith` | Ends with |\n| `$endsWithi` | Ends with (case-insensitive) |\n| `$or` | Joins the filters in an \"or\" expression |\n| `$and` | Joins the filters in an \"and\" expression |\n| `$not` | Joins the filters in an \"not\" expression |\nWhen several fields are passed in the `filters` object, they are implicitly combined with `$and` (e.g. `GET /api/restaurants?filters[stars][$gte]=3&filters[open][$eq]=true` only returns restaurants that are open and have at least 3 stars).\nTip\n`$and`, `$or` and `$not` operators can be nested inside one another.\nCaution\nBy default, the filters can only be used from `find` endpoints generated by the Content-type Builder and the CLI.\n## Example: Find users having 'John' as a first name[‚Äã](#example-find-users-having-john-as-a-first-name \"Direct link to Example: Find users having 'John' as a first name\")\nYou can use the `$eq` filter operator to find an exact match.\nFind users having 'John' as first name\n`GET /api/users?filters[username][$eq]=John`\nJavaScript query (built with the qs library):\nThe query URL above was built using [the \\`qs\\` library](https://github.com/ljharb/qs). `qs` can be run locally on your machine, as shown in the following code example, or you can use our **[interactive query builder](https://docs.strapi.io/cms/api/rest/interactive-query-builder)** online tool.\n```\nconst qs = require('qs');const query = qs.stringify({  filters: {    username: {      $eq: 'John',    },  },}, {  encodeValuesOnly: true, // prettify URL});await request(`/api/users?${query}`);\n```\nExample response\n```\n{  \"data\": [    {      \"id\": 1,      \"documentId\": \"znrlzntu9ei5onjvwfaalu2v\",      \"username\": \"John\",      \"email\": \"john@test.com\",      \"provider\": \"local\",      \"confirmed\": true,      \"blocked\": false,      \"createdAt\": \"2021-12-03T20:08:17.740Z\",      \"updatedAt\": \"2021-12-03T20:08:17.740Z\"    }  ],  \"meta\": {  \"pagination\": {    \"page\": 1,    \"pageSize\": 25,    \"pageCount\": 1,    \"total\": 1  }}\n```\n## Example: Find multiple restaurants with ids 3, 6,8[‚Äã](#example-find-multiple-restaurants-with-ids-3-68 \"Direct link to Example: Find multiple restaurants with ids 3, 6,8\")\nYou can use the `$in` filter operator with an array of values to find multiple exact values.\nFind multiple restaurants with ids 3, 6, 8\n`GET /api/restaurants?filters[id][$in][0]=6&filters[id][$in][1]=8`\nJavaScript query (built with the qs library):\nThe query URL above was built using [the \\`qs\\` library](https://github.com/ljharb/qs). `qs` can be run locally on your machine, as shown in the following code example, or you can use our **[interactive query builder](https://docs.strapi.io/cms/api/rest/interactive-query-builder)** online tool.\n```\nconst qs = require('qs');const query = qs.stringify({  filters: {    id: {      $in: [3, 6, 8],    },  },}, {  encodeValuesOnly: true, // prettify URL});await request(`/api/restaurants?${query}`);\n```\nExample response\n```\n{  \"data\": [    {      \"id\": 6,      \"documentId\": \"ethwxjxtvuxl89jq720e38uk\",      \"name\": \"test6\",      // ...    },    {      \"id\": 8,      \"documentId\": \"cf07g1dbusqr8mzmlbqvlegx\",      \"name\": \"test8\",      // ...    },  ],  \"meta\": {    // ...  }}\n```\n## Complex filtering[‚Äã](#complex-filtering \"Direct link to Complex filtering\")\nComplex filtering is combining multiple filters using advanced methods such as combining `$and` & `$or`. This allows for more flexibility to request exactly the data needed.\nFind books with 2 possible dates and a specific author\n`GET /api/books?filters[$and][0][$or][0][date][$eq]=2020-01-01&filters[$and][0][$or][1][date][$eq]=2020-01-02&filters[$and][1][author][name][$eq]=Kai%20doe`\nJavaScript query (built with the qs library):\nThe query URL above was built using [the \\`qs\\` library](https://github.com/ljharb/qs). `qs` can be run locally on your machine, as shown in the following code example, or you can use our **[interactive query builder](https://docs.strapi.io/cms/api/rest/interactive-query-builder)** online tool.\n```\nconst qs = require('qs');const query = qs.stringify({  filters: {    $and: [      {        $or: [          {            date: {              $eq: '2020-01-01',            },          },          {            date: {              $eq: '2020-01-02',            },          },        ],      },      {        author: {          name: {            $eq: 'Kai doe',          },        },      },    ],  },}, {  encodeValuesOnly: true, // prettify URL});await request(`/api/books?${query}`);\n```\nExample response\n```\n{  \"data\": [    {      \"id\": 1,      \"documentId\": \"rxngxzclq0zdaqtvz67hj38d\",      \"name\": \"test1\",      \"date\": \"2020-01-01\",      // ...    },    {      \"id\": 2,      \"documentId\": \"kjkhff4e269a50b4vi16stst\",      \"name\": \"test2\",      \"date\": \"2020-01-02\",      // ...    }  ],  \"meta\": {    // ...  }}\n```\n## Deep filtering[‚Äã](#deep-filtering \"Direct link to Deep filtering\")\nDeep filtering is filtering on a relation's fields.\nNote\n-   Relations, media fields, components, and dynamic zones are not populated by default. Use the `populate` parameter to populate these content structures (see [`populate` documentation](https://docs.strapi.io/cms/api/rest/populate-select#population))\n-   You can filter what you populate, you can also filter nested relations, but you can't use filters for polymorphic content structures (such as media fields and dynamic zones).\nCaution\nQuerying your API with deep filters may cause performance issues. If one of your deep filtering queries is too slow, we recommend building a custom route with an optimized version of the query.\nDeep filtering with the various APIs\nFor examples of how to deep filter with the various APIs, please refer to [this blog article](https://strapi.io/blog/deep-filtering-alpha-26).\nFind restaurants owned by a chef who belongs to a 5-star restaurant\n`GET /api/restaurants?filters[chef][restaurants][stars][$eq]=5`\nJavaScript query (built with the qs library):\nThe query URL above was built using [the \\`qs\\` library](https://github.com/ljharb/qs). `qs` can be run locally on your machine, as shown in the following code example, or you can use our **[interactive query builder](https://docs.strapi.io/cms/api/rest/interactive-query-builder)** online tool.\n```\nconst qs = require('qs');const query = qs.stringify({  filters: {    chef: {      restaurants: {        stars: {          $eq: 5,        },      },    },  },}, {  encodeValuesOnly: true, // prettify URL});await request(`/api/restaurants?${query}`);\n```\nExample response\n```\n{  \"data\": [    {      \"id\": 1,      \"documentId\": \"cvsz61qg33rtyv1qljb1nrtg\",      \"name\": \"GORDON RAMSAY STEAK\",      \"stars\": 5      // ...    },    {      \"id\": 2,      \"documentId\": \"uh17h7ibw0g8thit6ivi71d8\",      \"name\": \"GORDON RAMSAY BURGER\",      \"stars\": 5      // ...    }  ],  \"meta\": {    // ...  }}\n```\n**Tags:**\n-   [API](https://docs.strapi.io/tags/api)\n-   [complex filtering](https://docs.strapi.io/tags/complex-filtering)\n-   [Content API](https://docs.strapi.io/tags/content-api)\n-   [deep filtering](https://docs.strapi.io/tags/deep-filtering)\n-   [filters](https://docs.strapi.io/tags/filters)\n-   [find](https://docs.strapi.io/tags/find)\n-   [interactive query builder](https://docs.strapi.io/tags/interactive-query-builder)\n-   [locale](https://docs.strapi.io/tags/locale)\n-   [REST API](https://docs.strapi.io/tags/rest-api)\n-   [qs library](https://docs.strapi.io/tags/qs-library)\n[Contribute to this page](https://github.com/strapi/documentation/edit/main/docusaurus/docs/cms/api/rest/filters.md)\n[\nPrevious\nParameters\n](https://docs.strapi.io/cms/api/rest/parameters)[\nNext\nLocale\n](https://docs.strapi.io/cms/api/rest/locale)\n-   [Example: Find users having 'John' as a first name](#example-find-users-having-john-as-a-first-name)\n-   [Example: Find multiple restaurants with ids 3, 6,8](#example-find-multiple-restaurants-with-ids-3-68)\n-   [Complex filtering](#complex-filtering)\n-   [Deep filtering](#deep-filtering)\n[Contribute to this page](https://github.com/strapi/documentation/edit/main/docusaurus/docs/cms/api/rest/filters.md)\nUpdates & Support\n-   [What's new?](https://docs.strapi.io/whats-new)\n-   [Release notes](https://docs.strapi.io/release-notes)\n-   [FAQ](https://docs.strapi.io/cms/faq)\n-   [Community & Support](https://docs.strapi.io/cms/community)\n-   [Usage information](https://docs.strapi.io/cms/usage-information)\nAdditional resources\n-   [LLMs.txt](https://docs.strapi.io/llms.txt)\n-   [LLMs-full.txt](https://docs.strapi.io/llms-full.txt)\n-   [v4 Docs](https://docs-v4.strapi.io)\n-   [Contributor Docs](https://contributor.strapi.io)\n-   [Strapi Design System](https://design-system.strapi.io/)\n-   [v3 Docs (unsupported)](https://docs-v3.strapi.io)\nCommunity\n-   [Discord](https://discord.strapi.io/)\n-   [Twitter](https://twitter.com/strapijs)\n-   [Stack Overflow](https://stackoverflow.com/questions/tagged/strapi)\nMore\n-   [Blog](https://strapi.io/blog)\n-   [GitHub](https://github.com/strapi/documentation)\n-   [Strapi.io](https://strapi.io)",
  "timestamp": 1753867783822,
  "title": "Filters | Strapi 5 Documentation"
}