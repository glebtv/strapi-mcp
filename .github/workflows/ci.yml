name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Setup environment variables
      run: |
        # Generate secure random values for Strapi configuration
        echo "APP_KEYS=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "API_TOKEN_SALT=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "ADMIN_JWT_SECRET=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "TRANSFER_TOKEN_SALT=$(openssl rand -base64 32)" >> $GITHUB_ENV
        echo "ADMIN_PASSWORD=$(openssl rand -base64 16)" >> $GITHUB_ENV
    
    - name: Setup Strapi test instance
      run: |
        # Create a minimal Strapi 5 project for testing
        npx -y create-strapi@latest strapi-test \
          --typescript \
          --no-run \
          --no-example \
          --no-git-init \
          --dbclient=sqlite \
          --skip-cloud \
          --install
        
        cd strapi-test
        
        # Create .env file with proper configuration
        cat > .env << EOF
        HOST=0.0.0.0
        PORT=1337
        APP_KEYS=$APP_KEYS
        API_TOKEN_SALT=$API_TOKEN_SALT
        ADMIN_JWT_SECRET=$ADMIN_JWT_SECRET
        TRANSFER_TOKEN_SALT=$TRANSFER_TOKEN_SALT
        ADMIN_EMAIL=admin@ci.local
        ADMIN_PASSWORD=$ADMIN_PASSWORD
        DATABASE_CLIENT=sqlite
        DATABASE_FILENAME=.tmp/data.db
        NODE_ENV=test
        EOF
        
        # Create required content types
        mkdir -p src/api/project/content-types/project
        mkdir -p src/api/project/controllers
        mkdir -p src/api/project/routes
        mkdir -p src/api/project/services
        
        cat > src/api/project/content-types/project/schema.json << 'EOF'
        {
          "kind": "collectionType",
          "collectionName": "projects",
          "info": {
            "singularName": "project",
            "pluralName": "projects",
            "displayName": "Project",
            "description": ""
          },
          "options": {
            "draftAndPublish": true
          },
          "pluginOptions": {},
          "attributes": {
            "name": {
              "type": "string",
              "required": true
            },
            "description": {
              "type": "text"
            },
            "slug": {
              "type": "uid",
              "targetField": "name"
            },
            "technologies": {
              "type": "relation",
              "relation": "manyToMany",
              "target": "api::technology.technology",
              "inversedBy": "projects"
            }
          }
        }
        EOF
        
        mkdir -p src/api/technology/content-types/technology
        mkdir -p src/api/technology/controllers
        mkdir -p src/api/technology/routes
        mkdir -p src/api/technology/services
        
        cat > src/api/technology/content-types/technology/schema.json << 'EOF'
        {
          "kind": "collectionType",
          "collectionName": "technologies",
          "info": {
            "singularName": "technology",
            "pluralName": "technologies",
            "displayName": "Technology",
            "description": ""
          },
          "options": {
            "draftAndPublish": true
          },
          "pluginOptions": {},
          "attributes": {
            "name": {
              "type": "string",
              "required": true
            },
            "projects": {
              "type": "relation",
              "relation": "manyToMany",
              "target": "api::project.project",
              "mappedBy": "technologies"
            }
          }
        }
        EOF
        
        # Generate routes and controllers
        cat > src/api/project/routes/project.js << 'EOF'
        'use strict';
        const { createCoreRouter } = require('@strapi/strapi').factories;
        module.exports = createCoreRouter('api::project.project');
        EOF
        
        cat > src/api/project/controllers/project.js << 'EOF'
        'use strict';
        const { createCoreController } = require('@strapi/strapi').factories;
        module.exports = createCoreController('api::project.project');
        EOF
        
        cat > src/api/project/services/project.js << 'EOF'
        'use strict';
        const { createCoreService } = require('@strapi/strapi').factories;
        module.exports = createCoreService('api::project.project');
        EOF
        
        cat > src/api/technology/routes/technology.js << 'EOF'
        'use strict';
        const { createCoreRouter } = require('@strapi/strapi').factories;
        module.exports = createCoreRouter('api::technology.technology');
        EOF
        
        cat > src/api/technology/controllers/technology.js << 'EOF'
        'use strict';
        const { createCoreController } = require('@strapi/strapi').factories;
        module.exports = createCoreController('api::technology.technology');
        EOF
        
        cat > src/api/technology/services/technology.js << 'EOF'
        'use strict';
        const { createCoreService } = require('@strapi/strapi').factories;
        module.exports = createCoreService('api::technology.technology');
        EOF
        
        # Copy bootstrap script to create tokens automatically
        cp ../../scripts/bootstrap-tokens.ts src/index.ts
        
        # Build Strapi
        npm run build
        
        # Start Strapi and capture output to extract token
        npm run start > strapi_output.log 2>&1 &
        STRAPI_PID=$!
        echo "STRAPI_PID=$STRAPI_PID" >> $GITHUB_ENV
        
        # Wait for token generation
        echo "Waiting for Strapi to start and generate tokens..."
        for i in {1..30}; do
          if grep -q "ðŸ”‘ Access Key:" strapi_output.log; then
            echo "Token generated!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 1
        done
        
        # Extract the API token with proper pattern
        FULL_ACCESS_TOKEN=$(grep -A1 "CI/CD Full Access" strapi_output.log | grep "ðŸ”‘ Access Key:" | sed 's/.*ðŸ”‘ Access Key: //')
        READ_ONLY_TOKEN=$(grep -A1 "Testing Read Only" strapi_output.log | grep "ðŸ”‘ Access Key:" | sed 's/.*ðŸ”‘ Access Key: //')
        
        if [ -z "$FULL_ACCESS_TOKEN" ]; then
          echo "Failed to extract API token"
          echo "=== Strapi Output ==="
          cat strapi_output.log
          exit 1
        fi
        
        echo "STRAPI_API_TOKEN=$FULL_ACCESS_TOKEN" >> $GITHUB_ENV
        echo "STRAPI_READ_ONLY_TOKEN=$READ_ONLY_TOKEN" >> $GITHUB_ENV
        echo "API Token extracted successfully"
        
        # Test the token
        sleep 2
        curl -f -H "Authorization: Bearer $FULL_ACCESS_TOKEN" http://localhost:1337/api/projects || {
          echo "Token validation failed"
          cat strapi_output.log
          exit 1
        }
        
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build MCP server
      run: npm run build
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run typecheck
    
    - name: Run tests
      run: npm test
      env:
        STRAPI_URL: http://localhost:1337
    
    - name: Stop Strapi
      if: always()
      run: |
        if [ ! -z "$STRAPI_PID" ]; then
          kill $STRAPI_PID || true
        fi
