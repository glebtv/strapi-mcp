name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: strapi
          POSTGRES_PASSWORD: strapi
          POSTGRES_DB: strapi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Setup Strapi test instance
      run: |
        # Create a minimal Strapi project for testing
        npx create-strapi-app@latest strapi-test --quickstart --no-run \
          --dbclient=postgres \
          --dbhost=localhost \
          --dbport=5432 \
          --dbname=strapi_test \
          --dbusername=strapi \
          --dbpassword=strapi \
          --dbssl=false
        
        cd strapi-test
        
        # Create required content types
        mkdir -p src/api/project/content-types/project
        mkdir -p src/api/project/controllers
        mkdir -p src/api/project/routes
        mkdir -p src/api/project/services
        
        cat > src/api/project/content-types/project/schema.json << 'EOF'
        {
          "kind": "collectionType",
          "collectionName": "projects",
          "info": {
            "singularName": "project",
            "pluralName": "projects",
            "displayName": "Project",
            "description": ""
          },
          "options": {
            "draftAndPublish": true
          },
          "pluginOptions": {},
          "attributes": {
            "name": {
              "type": "string",
              "required": true
            },
            "description": {
              "type": "text"
            },
            "slug": {
              "type": "uid",
              "targetField": "name"
            },
            "technologies": {
              "type": "relation",
              "relation": "manyToMany",
              "target": "api::technology.technology",
              "inversedBy": "projects"
            }
          }
        }
        EOF
        
        mkdir -p src/api/technology/content-types/technology
        mkdir -p src/api/technology/controllers
        mkdir -p src/api/technology/routes
        mkdir -p src/api/technology/services
        
        cat > src/api/technology/content-types/technology/schema.json << 'EOF'
        {
          "kind": "collectionType",
          "collectionName": "technologies",
          "info": {
            "singularName": "technology",
            "pluralName": "technologies",
            "displayName": "Technology",
            "description": ""
          },
          "options": {
            "draftAndPublish": true
          },
          "pluginOptions": {},
          "attributes": {
            "name": {
              "type": "string",
              "required": true
            },
            "projects": {
              "type": "relation",
              "relation": "manyToMany",
              "target": "api::project.project",
              "mappedBy": "technologies"
            }
          }
        }
        EOF
        
        # Generate routes and controllers
        cat > src/api/project/routes/project.js << 'EOF'
        'use strict';
        const { createCoreRouter } = require('@strapi/strapi').factories;
        module.exports = createCoreRouter('api::project.project');
        EOF
        
        cat > src/api/project/controllers/project.js << 'EOF'
        'use strict';
        const { createCoreController } = require('@strapi/strapi').factories;
        module.exports = createCoreController('api::project.project');
        EOF
        
        cat > src/api/project/services/project.js << 'EOF'
        'use strict';
        const { createCoreService } = require('@strapi/strapi').factories;
        module.exports = createCoreService('api::project.project');
        EOF
        
        cat > src/api/technology/routes/technology.js << 'EOF'
        'use strict';
        const { createCoreRouter } = require('@strapi/strapi').factories;
        module.exports = createCoreRouter('api::technology.technology');
        EOF
        
        cat > src/api/technology/controllers/technology.js << 'EOF'
        'use strict';
        const { createCoreController } = require('@strapi/strapi').factories;
        module.exports = createCoreController('api::technology.technology');
        EOF
        
        cat > src/api/technology/services/technology.js << 'EOF'
        'use strict';
        const { createCoreService } = require('@strapi/strapi').factories;
        module.exports = createCoreService('api::technology.technology');
        EOF
        
        # Configure Strapi to allow API token generation
        cat > config/admin.js << 'EOF'
        module.exports = ({ env }) => ({
          auth: {
            secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
          },
          apiToken: {
            salt: env('API_TOKEN_SALT', 'someRandomSalt'),
          },
        });
        EOF
        
        # Build and start Strapi
        npm run build
        npm run develop &
        STRAPI_PID=$!
        echo "STRAPI_PID=$STRAPI_PID" >> $GITHUB_ENV
        
        # Wait for Strapi to be ready
        echo "Waiting for Strapi to start..."
        for i in {1..60}; do
          if curl -s http://localhost:1337/_health | grep -q "ok"; then
            echo "Strapi is ready!"
            break
          fi
          echo "Waiting... ($i/60)"
          sleep 2
        done
        
        # Create an API token using Strapi's admin API
        # First, we need to create an admin user
        ADMIN_EMAIL="test@example.com"
        ADMIN_PASSWORD="Test1234!"
        
        # Register the first admin user
        ADMIN_JWT=$(curl -s -X POST http://localhost:1337/admin/register-admin \
          -H "Content-Type: application/json" \
          -d "{
            \"email\": \"$ADMIN_EMAIL\",
            \"password\": \"$ADMIN_PASSWORD\",
            \"firstname\": \"Test\",
            \"lastname\": \"Admin\"
          }" | jq -r '.data.token')
        
        # Create an API token
        API_TOKEN_RESPONSE=$(curl -s -X POST http://localhost:1337/admin/api-tokens \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $ADMIN_JWT" \
          -d '{
            "name": "CI Test Token",
            "description": "Token for CI tests",
            "type": "full-access",
            "lifespan": null
          }')
        
        API_TOKEN=$(echo $API_TOKEN_RESPONSE | jq -r '.data.accessKey')
        echo "STRAPI_API_TOKEN=$API_TOKEN" >> $GITHUB_ENV
        
        # Ensure public permissions for content types
        # Get all permissions
        PERMISSIONS=$(curl -s http://localhost:1337/admin/permissions \
          -H "Authorization: Bearer $ADMIN_JWT")
        
        # Update public role permissions for projects and technologies
        PUBLIC_ROLE_ID=$(curl -s http://localhost:1337/admin/roles \
          -H "Authorization: Bearer $ADMIN_JWT" | jq -r '.data[] | select(.type == "public") | .id')
        
        # Enable all actions for public role (for testing)
        curl -s -X PUT http://localhost:1337/admin/roles/$PUBLIC_ROLE_ID \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $ADMIN_JWT" \
          -d '{
            "permissions": {
              "api::project.project": {
                "controllers": {
                  "project": {
                    "find": { "enabled": true },
                    "findOne": { "enabled": true },
                    "create": { "enabled": true },
                    "update": { "enabled": true },
                    "delete": { "enabled": true }
                  }
                }
              },
              "api::technology.technology": {
                "controllers": {
                  "technology": {
                    "find": { "enabled": true },
                    "findOne": { "enabled": true },
                    "create": { "enabled": true },
                    "update": { "enabled": true },
                    "delete": { "enabled": true }
                  }
                }
              }
            }
          }'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build MCP server
      run: npm run build
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run typecheck
    
    - name: Run tests
      run: npm test
      env:
        STRAPI_URL: http://localhost:1337
    
    - name: Stop Strapi
      if: always()
      run: |
        if [ ! -z "$STRAPI_PID" ]; then
          kill $STRAPI_PID || true
        fi